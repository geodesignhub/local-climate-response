"""v2 migration

Revision ID: cd61e60118f7
Revises: 
Create Date: 2025-06-26 15:47:39.931470

"""
from alembic import op
import sqlalchemy as sa
import geoalchemy2
from geoalchemy2 import Geometry

# revision identifiers, used by Alembic.
revision = 'cd61e60118f7'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('apiversion',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_apiversion_version'), 'apiversion', ['version'], unique=True)
    op.create_table('impact_intensity',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('intensity', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_impact_intensity_intensity'), 'impact_intensity', ['intensity'], unique=True)
    op.create_table('impact_unit',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('unit', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_impact_unit_description'), 'impact_unit', ['description'], unique=False)
    op.create_index(op.f('ix_impact_unit_unit'), 'impact_unit', ['unit'], unique=True)
    op.create_table('measure_types',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('default_color', sa.String(), nullable=True),
    sa.Column('default_inflow', sa.Float(), nullable=True),
    sa.Column('default_depth', sa.Float(), nullable=True),
    sa.Column('default_width', sa.Float(), nullable=True),
    sa.Column('default_radius', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_measure_types_id'), 'measure_types', ['id'], unique=False)
    op.create_table('project',
    sa.Column('id', sa.String(length=50), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.String(length=1000), nullable=True),
    sa.Column('settings', sa.JSON(), nullable=True, comment='Project-level settings (scenario, capacity, etc.)'),
    sa.Column('map_settings', sa.JSON(), nullable=True, comment='Map display settings (center, zoom, base layer)'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_project_title'), 'project', ['title'], unique=False)
    op.create_table('target_value',
    sa.Column('id', sa.String(length=50), nullable=False),
    sa.Column('type', sa.String(length=20), nullable=False, comment='Type of target value: storage_capacity, groundwater_recharge, evapotranspiration, temp_reduction, cool_spot, construction_cost, maintenance_cost, filtering_unit, capture_unit, settling_unit '),
    sa.Column('value', sa.Float(), nullable=True),
    sa.Column('include', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_geospatial_table('treelocation',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('location', sa.String(), nullable=False),
    sa.Column('geometry', Geometry(geometry_type='POINT', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True, spatial_index=False),
    sa.Column('session_id', sa.UUID(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_geospatial_index('idx_geo_data_geometry', 'treelocation', ['geometry'], unique=False, postgresql_using='gist', postgresql_ops={})
    op.create_geospatial_index('idx_treelocation_geometry', 'treelocation', ['geometry'], unique=False, postgresql_using='gist', postgresql_ops={})
    op.create_index(op.f('ix_treelocation_location'), 'treelocation', ['location'], unique=False)
    op.create_table('user',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=False),
    sa.Column('last_name', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('disabled', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_index(op.f('ix_user_id'), 'user', ['id'], unique=False)
    op.create_index(op.f('ix_user_username'), 'user', ['username'], unique=True)
    op.create_geospatial_table('naturebasedsolution',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('definition', sa.String(), nullable=False),
    sa.Column('cobenefits', sa.String(), nullable=False),
    sa.Column('specificdetails', sa.String(), nullable=False),
    sa.Column('location', sa.String(), nullable=False),
    sa.Column('geometry', Geometry(srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True, spatial_index=True),
    sa.Column('styling', sa.JSON(), nullable=True),
    sa.Column('physical_properties', sa.JSON(), nullable=True, comment='Physical dimensions and properties'),
    sa.Column('measure_id', sa.String(), nullable=True, comment='Reference to measure type'),
    sa.Column('area', sa.Float(), nullable=True, comment='Calculated area in square meters'),
    sa.Column('length', sa.Float(), nullable=True, comment='Calculated length in meters (for LineString)'),
    sa.ForeignKeyConstraint(['measure_id'], ['measure_types.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_geospatial_index('idx_naturebasedsolution_geometry', 'naturebasedsolution', ['geometry'], unique=False, postgresql_using='gist', postgresql_ops={})
    op.create_index(op.f('ix_naturebasedsolution_cobenefits'), 'naturebasedsolution', ['cobenefits'], unique=False)
    op.create_index(op.f('ix_naturebasedsolution_definition'), 'naturebasedsolution', ['definition'], unique=False)
    op.create_index(op.f('ix_naturebasedsolution_location'), 'naturebasedsolution', ['location'], unique=False)
    op.create_index(op.f('ix_naturebasedsolution_name'), 'naturebasedsolution', ['name'], unique=True)
    op.create_index(op.f('ix_naturebasedsolution_specificdetails'), 'naturebasedsolution', ['specificdetails'], unique=False)
    op.create_table('project_targetvalue_assoc',
    sa.Column('project_id', sa.String(), nullable=False),
    sa.Column('targetvalue_id', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['targetvalue_id'], ['target_value.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('project_id', 'targetvalue_id')
    )
    op.create_table('impact',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('magnitude', sa.Float(), nullable=False),
    sa.Column('intensity_id', sa.Integer(), nullable=False),
    sa.Column('unit_id', sa.Integer(), nullable=False),
    sa.Column('solution_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['intensity_id'], ['impact_intensity.id'], ),
    sa.ForeignKeyConstraint(['solution_id'], ['naturebasedsolution.id'], ),
    sa.ForeignKeyConstraint(['unit_id'], ['impact_unit.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_impact_magnitude'), 'impact', ['magnitude'], unique=False)
    op.create_table('project_nbs_assoc',
    sa.Column('project_id', sa.String(), nullable=False),
    sa.Column('nbs_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['nbs_id'], ['naturebasedsolution.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('project_id', 'nbs_id')
    )
    op.create_table('specialized_impact',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('impact_id', sa.Integer(), nullable=False),
    sa.Column('climate_data', sa.JSON(), nullable=True, comment='Climate-related impact metrics (temp_reduction, cool_spot, etc.)'),
    sa.Column('water_quality_data', sa.JSON(), nullable=True, comment='Water quality impact metrics (capture_unit, filtering_unit, etc.)'),
    sa.Column('cost_data', sa.JSON(), nullable=True, comment='Cost-related metrics (construction_cost, maintenance_cost, etc.)'),
    sa.ForeignKeyConstraint(['impact_id'], ['impact.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('impact_id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('specialized_impact')
    op.drop_table('project_nbs_assoc')
    op.drop_index(op.f('ix_impact_magnitude'), table_name='impact')
    op.drop_table('impact')
    op.drop_table('project_targetvalue_assoc')
    op.drop_index(op.f('ix_naturebasedsolution_specificdetails'), table_name='naturebasedsolution')
    op.drop_index(op.f('ix_naturebasedsolution_name'), table_name='naturebasedsolution')
    op.drop_index(op.f('ix_naturebasedsolution_location'), table_name='naturebasedsolution')
    op.drop_index(op.f('ix_naturebasedsolution_definition'), table_name='naturebasedsolution')
    op.drop_index(op.f('ix_naturebasedsolution_cobenefits'), table_name='naturebasedsolution')
    op.drop_geospatial_index('idx_naturebasedsolution_geometry', table_name='naturebasedsolution', postgresql_using='gist', column_name='geometry')
    op.drop_geospatial_table('naturebasedsolution')
    op.drop_index(op.f('ix_user_username'), table_name='user')
    op.drop_index(op.f('ix_user_id'), table_name='user')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    op.drop_index(op.f('ix_treelocation_location'), table_name='treelocation')
    op.drop_geospatial_index('idx_treelocation_geometry', table_name='treelocation', postgresql_using='gist', column_name='geometry')
    op.drop_geospatial_index('idx_geo_data_geometry', table_name='treelocation', postgresql_using='gist', column_name='geometry')
    op.drop_geospatial_table('treelocation')
    op.drop_table('target_value')
    op.drop_index(op.f('ix_project_title'), table_name='project')
    op.drop_table('project')
    op.drop_index(op.f('ix_measure_types_id'), table_name='measure_types')
    op.drop_table('measure_types')
    op.drop_index(op.f('ix_impact_unit_unit'), table_name='impact_unit')
    op.drop_index(op.f('ix_impact_unit_description'), table_name='impact_unit')
    op.drop_table('impact_unit')
    op.drop_index(op.f('ix_impact_intensity_intensity'), table_name='impact_intensity')
    op.drop_table('impact_intensity')
    op.drop_index(op.f('ix_apiversion_version'), table_name='apiversion')
    op.drop_table('apiversion')
    # ### end Alembic commands ###
